# Generated by Django 4.1.2 on 2022-10-20 22:06

from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("celphone_number", models.CharField(blank=True, max_length=15)),
                ("image", models.ImageField(null=True, upload_to="../static/img")),
                ("address", models.CharField(blank=True, max_length=50)),
                ("birth", models.DateField(blank=True, null=True)),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("ADMIN", "Admin"),
                            ("CLIENT", "Client"),
                            ("GERENTE", "Gerente"),
                        ],
                        max_length=50,
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Employee",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        choices=[
                            ("milagros", "Milagros"),
                            ("mariana", "Mariana"),
                            ("monica", "Monica"),
                        ],
                        max_length=15,
                    ),
                ),
                ("age", models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name="Genre",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("MUJER", "Mujer"),
                            ("HOMBRE", "Hombre"),
                            ("NO RESPONDE", "No responde"),
                        ],
                        max_length=50,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Neighborhood",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("agronomia", "AGRONOMIA (COMUNA 15)"),
                            ("almagro", "ALMAGRO (COMUNA 5)"),
                            ("balvanera", "BALVANERA (COMUNA 3)"),
                            ("barracas", "BARRACAS (COMUNA 4)"),
                            ("belgrano", "BELGRANO (COMUNA 13)"),
                            ("boca", "BOCA (COMUNA 4)"),
                            ("boedo", "BOEDO (COMUNA 5)"),
                            ("caballito", "CABALLITO (COMUNA 6)"),
                            ("chacarita", "CHACARITA (COMUNA 15)"),
                            ("coghlan", "COGHLAN (COMUNA 12)"),
                            ("colegiales", "COLEGIALES (COMUNA 13)"),
                            ("constitucion", "CONSTITUCION (COMUNA 1)"),
                            ("flores", "FLORES (COMUNA 10)"),
                            ("floresta", "FLORESTA (COMUNA 10)"),
                            ("liniers", "LINIERS (COMUNA 9)"),
                            ("mataderos", "MATADEROS (COMUNA 9)"),
                            ("monserrat", "MONTSERRAT (COMUNA 1)"),
                            ("monte-castro", "MONTE CASTRO (COMUNA 10)"),
                            ("nueva-pompeya", "NUEVA POMPEYA (COMUNA 4)"),
                            ("nunez", "NUÃ‘EZ (COMUNA 13)"),
                            ("palermo", "PALERMO (COMUNA 14)"),
                            ("parque-avellaneda", "PARQUE AVELLANEDA (COMUNA 9)"),
                            ("parque-chacabuco", "PARQUE CHACABUCO (COMUNA 7)"),
                            ("parque-chas", "PARQUE CHAS (COMUNA 15)"),
                            ("parque-patricios", "PARQUE PATRICIOS (COMUNA 4)"),
                            ("paternal", "PATERNAL (COMUNA 15)"),
                            ("puerto-madero", "PUERTO MADERO (COMUNA 1)"),
                            ("recoleta", "RECOLETA (COMUNA 2)"),
                            ("retiro", "RETIRO(COMUNA 1)"),
                            ("saavedra", "SAAVEDRA (COMUNA 12)"),
                            ("san-cristobal", "SAN CRISTOBAL (COMUNA 3)"),
                            ("san-nicolas", "SAN NICOLAS (COMUNA 1)"),
                            ("san-telmo", "SAN TELMO (COMUNA 1)"),
                            ("velez-sarfield", "VELEZ SARFIELD (COMUNA 10)"),
                            ("versalles", "VERSALLES (COMUNA 10)"),
                            ("villa-crespo", "VILLA CRESPO (COMUNA 15 )"),
                            ("villa-del-parque", "VILLA DEL PARQUE (COMUNA 11 )"),
                            ("villa-devoto", "VILLA DEVOTO (COMUNA 11 )"),
                            ("villa-gral-mitre", "VILLA GRAL. MITRE (COMUNA 11 )"),
                            ("villa-lugano", "VILLA LUGANO (COMUNA 8 )"),
                            ("villa-luro", "VILLA LURO (COMUNA 10 )"),
                            ("villa-ortuzar", "VILLA ORTUZAR (COMUNA 15 )"),
                            ("villa-pueyrredon", "VILLA PUEYRREDON (COMUNA 12 )"),
                            ("villa-real", "VILLA REAL (COMUNA 10 )"),
                            ("villa-riachuelo", "VILLA RIACHUELO (COMUNA 8 )"),
                            ("villa-santa-rita", "VILLA SANTA RITA (COMUNA 11 )"),
                            ("villa-soldati", "VILLA SOLDATI (COMUNA 8)"),
                            ("villa-urquiza", "VILLA URQUIZA(COMUNA 12 )"),
                        ],
                        max_length=30,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Service",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("geln", "Gel nail"),
                            ("kapn", "Kapping nail"),
                            ("acrn", "Acrylic nail"),
                            ("lifting", "Lifting lashes"),
                            ("extension", "Extension lashes"),
                            ("perfilado", "Perfilado de cejas"),
                            ("threading", "Threading de cejas"),
                            ("facial", "Tratamiento facial"),
                        ],
                        max_length=10,
                    ),
                ),
                ("duration", models.PositiveBigIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name="GerenteProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("gerente_id", models.IntegerField(blank=True, null=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ClientProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("client_id", models.IntegerField(blank=True, null=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Booking",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("check_in", models.DateTimeField()),
                ("check_out", models.DateTimeField()),
                (
                    "employee",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="reservation.employee",
                    ),
                ),
                (
                    "service",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="reservation.service",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="user",
            name="genre",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="reservation.genre",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="groups",
            field=models.ManyToManyField(
                blank=True,
                help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                related_name="user_set",
                related_query_name="user",
                to="auth.group",
                verbose_name="groups",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="neighborhood",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="reservation.neighborhood",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.permission",
                verbose_name="user permissions",
            ),
        ),
        migrations.CreateModel(
            name="Client",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("reservation.user",),
            managers=[
                ("client", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Gerente",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("reservation.user",),
            managers=[
                ("gerente", django.db.models.manager.Manager()),
            ],
        ),
    ]
